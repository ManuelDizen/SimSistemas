import numpy as np
import matplotlib.pyplot as plt
import math
import pandas as pd
import scipy as sp
from sklearn.neighbors import KernelDensity
from matplotlib import pyplot

from scipy.stats import nbinom, bernoulli
def velocity_changes():
    x = [0.5, 1.0, 1.5, 2.0, 3.0, 4.0, 6.0, 8.0]
    y_056 = [2473.773354514714, 902.1322258340551, 403.0137353156788, 386.961843200721, 275.5400210271354, 245.8986021598205, 229.33763611886263, 139.23864630250876]
    y_049 = [2757.591761891317, 1021.3233801755597, 463.210052184612, 334.8584564459816, 239.52630002155743, 191.3813404960547, 148.40231350218357, 75.01607150923762]
    y_042 = [3273.10194929971, 1344.7161382667402, 1310.189275835889, 724.472285335991, 621.9307021169284, 320.15392476031303, 491.00666372633094, 201.3278015931262]

    p = np.polyfit(x, y_056, 4)
    y_fit_056 = np.polyval(p, x)
    p2 = np.polyfit(x, y_049, 4)
    y_fit_049 = np.polyval(p2, x)
    p3 = np.polyfit(x, y_042, 4)
    y_fit_042 = np.polyval(p3, x)

    fig, ax = plt.subplots()
    #ax.plot(x, y_056, 'o', label='Data')
    ax.plot(x, y_fit_056, label='y0 = 0.56')
    ax.plot(x, y_fit_049, label='y0 = 0.49')
    ax.plot(x, y_fit_042, label='y0 = 0.42')

    ax.set_xlabel('Velocidad Inicial (m/s)')
    ax.set_ylabel('Tiempo (s)')
    plt.grid(visible=True)
    ax.legend()
    plt.show()

data = [0.5407321511320027, 0.005598200060636809, 0.005411893730230922, 0.005442153081970814, 0.005403664582956758, 0.04202245719902148, 0.0021425292367626, 0.01846523227280522, 0.14666367290621068, 4.073041072922882E-4, 0.007196008323373612, 0.056975043518825125, 0.15695911007897062, 0.0023328210799757965, 0.0172243207423272, 0.008774330904282153, 0.04127210173514858, 0.19468785949429523, 0.058767990379240964, 0.12285081792163671, 0.25534078232004503, 0.39201934774840114, 0.08559668876705806, 0.8350157741367619, 3.5719239269997054, 2.903103672076116, 1.364188066881909, 1.406404320060205, 0.45738014193530496, 3.897987514177446, 1.0685221190802308, 0.1409854217701607, 0.8314275058382519, 2.8509450051886382, 1.4843114256593744, 1.454095999659181, 2.8551607369369556, 0.6807659856000345, 3.9909973747429994, 6.255233574164373, 3.728007330759283, 0.44373804984362764, 1.3810222154530507, 1.4243930993396337, 0.8040740250368792, 3.9605531380538537, 0.43557105067944946, 1.7356986693241703, 0.01549292024210395, 4.248377864420845, 0.0035932970887602167, 2.531751715503228, 3.6956526835292447, 0.23078922490057607, 0.6363861784808229, 8.485589910201085, 4.9204064226256445, 2.7460038138006, 6.436694286121348, 4.8081301092518665, 0.4865630204965061, 0.34975748584359145, 6.124654301202018, 2.5212922742479336, 4.725620316257027, 2.3741024518873357, 1.203105415133075, 9.638171845090785, 4.177751967480068, 5.014887792303144, 3.4722893573107676, 2.013720134399879, 3.744466170064616, 4.677844387280347, 2.1740558235944523, 0.5274910915163424, 8.060133608238065, 2.455182258567433, 7.435049147328719, 0.1775494554448258, 0.7303885363885954, 1.4762837596631897, 6.414559755746048, 28.29669284759621, 7.77343687666372, 0.7420990525437983, 5.638979097367029, 9.046521950857949, 9.756771894540181, 0.8003260783263784, 4.826484617242208, 3.434640140983104, 2.3049242452375225, 7.820515627369062, 1.8096888314966098, 6.1718344632889295, 6.803024140596641, 0.13846052199433956, 2.596825280040143, 10.752759356047644, 15.71051197638549, 0.056232580666637944, 0.8440283510955489, 23.695992252827327, 8.215486042259469, 5.467201947869652, 5.703397531047017, 12.604225215498019, 2.8918749345650845, 14.242328473290147, 7.7972590386149605, 4.781346127000461, 0.14845909853849193, 4.344573492857737, 11.648113448635774, 13.868580730515633, 8.802800345155523, 10.359321401821477, 10.699145925032147, 4.508425811747356, 2.33499327766735, 5.710362518100619, 10.05953910528941, 7.24794695920441, 13.293589772283646, 5.11971959333447, 4.5926900356136136, 6.855268270777416, 22.18005387021723, 3.0615289018042375, 4.6196848999876785, 0.6185851159049784, 2.3847735915181816, 0.7272197718241298, 6.470389647770277, 12.645676737821473, 6.135948315406646, 30.71085696815405, 1.2441015127209631, 4.524259067525222, 11.937378520543803, 3.403882450821925, 9.60123541654213, 30.710856968154044, 11.56097929274912, 19.149877675404923, 8.733529888022096, 28.620824895132507, 10.710100190251481, 4.02848925692458, 3.807727070685125, 0.4034172312956912, 17.525473440969677, 15.645789123532207, 4.244409192682259, 14.147029929764564, 3.8428019049598703, 51.8865088658037, 3.308048075531005, 4.653747505594652, 15.184916079441157, 19.622754531684098, 18.511825644148477, 18.15653535065525, 11.199301813388878, 25.46905918141485, 36.66836099480373, 0.3216795240577852, 36.34668147074594, 11.44944948323083, 23.604836991434915, 20.413968918908807, 43.6551048935589, 47.580954404442, 0.5788775663195906, 91.81493686432049, 57.95437262307368, 33.860564241246806, 91.81493686432049, 56.81548862822925, 15.43815172435922, 19.56129651173202, 91.81493686432049, 86.55290808210324, 5.262028782217243, 91.81493686432049, 22.394917958457583, 62.11672290482839, 7.02409717265515, 10.847847084211555, 74.47119476790695, 136.68724879885917]

def PDF():
    x_range = range(0, math.ceil(max(data)))
    fig, ax = plt.subplots()
    # values, bins = plt.hist(data, bins=100)
    data.sort()
    y, edges = np.histogram(data[0:50], bins=50)



    totalFreq = 0
    cumBins = np.zeros(len(y))
    i = 0
    for bin in y:
        auxFreq = bin/len(data)
        cumBins[i] = (auxFreq+totalFreq)
        totalFreq += auxFreq
        i += 1

    centers = 0.5 * (edges[1:] + edges[:-1])
    values = y/sum(y)

    # plt.yscale("log")
    plt.plot(centers, y, '-')

    plt.xlabel('Tiempo entre colisiones (s)')
    plt.ylabel('Frecuencia')
    plt.grid(visible=True)
    plt.savefig("../files/PDFforCollisionTimes.png")
    plt.show()

def PDF2():

    print('Average: ' + str(np.mean(data)) + ', stddev: ' + str(np.std(data)))

    sample = np.hstack(data)

    model = KernelDensity(bandwidth=3, kernel="gaussian")
    sample = sample.reshape((len(sample),1))
    model.fit(sample)
    values = np.asarray(data)
    values = values.reshape((len(values), 1))
    probabilites = model.score_samples(values)
    probabilites = np.exp(probabilites)
    pyplot.hist(sample, bins=100, density=True)
    pyplot.plot(sample[:], probabilites)
    pyplot.show()

def determinism():
    x = [20, 16, 12, 8, 4]
    y = [186.4502241060161, 168.56659213903043, 169.45750251790494, 150.726076645, 165.592044]
    c = np.array([107.57896755914535, 96.49425525763274, 80.42082906181099, 50.37812030728395, 103.13130923612508])
    c = c / math.sqrt(50)
    plt.scatter(x, y)
    # plt.errorbar(x, y, yerr=c, fmt="o")
    plt.xlabel("Tiempo promedio (s)")
    plt.ylabel("Ordenes de magnitud en c√°lculo")
    plt.grid(visible=True)
    plt.show()

determinism()